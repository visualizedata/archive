{"version":3,"mappings":"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","names":["relList","link","processPreload","mutations","mutation","node","getFetchOpts","script","fetchOpts","cleanString","str","makeSlug","p","year","title","author","fetchProjects","state","input","data","project","b","createMetadata","projects","tags","categories","years","entry","useFilters","defineStore","query","options","key","value","routes","__vitePreload","router","createRouter","createWebHashHistory","removeDuplicates","arr","cleanStrArr","tag","cleanNumArr","updateParams","filterStore","activeTags","activeCategories","activeYears","to","RootApp","defineAsyncComponent","app","createApp","pinia","createPinia","ElementPlus","VueSocialSharing"],"sources":["../../vite/modulepreload-polyfill","../../app/utils/fetchProjects.mjs","../../app/store/filters.mjs","../../app/router/index.js","../../app/main.mjs"],"sourcesContent":["__VITE_IS_MODERN__&&(function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n}());","export const cleanString = (str) => {\n  return str.replace(/[^A-Za-z0-9]+/g, '-').toLowerCase()\n}\n\nexport const makeSlug = (p) => {\n  const year = p.year\n  const title = cleanString(p.title)\n  const author = cleanString(p.author.join('-'))\n\n  // example: 2020-my-thesis-jane-doe\n  return [year, title, author].join('-')\n}\n\n/**\n * allProjects\n * @description this function finds all of the JSON files in our `/data/src` folder\n * and merges them together into one array\n */\nexport const fetchProjects = () => {\n  // relative path to \"data\" folder\n  const files = import.meta.globEager(\n    '../../data/projects/?!(_schema).json'\n  )\n\n  const merged = Object.values(files).reduce((state, input) => {\n    // input is a \"module\" and the data we want is stored in `input.default`\n    const data = input.default || input\n\n    // if data is an array, join it to our existing \"state\" array\n    if (Array.isArray(data)) {\n      return state.concat(\n        data.map((project) => {\n          return { ...project, slug: makeSlug(project) }\n        })\n      )\n    }\n\n    // otherwise return our array as is\n    return state\n  }, [])\n\n  // initially sort projects by year\n  return merged.sort((a, b) => {\n    return b.year > a.year ? 1 : -1\n  })\n}\n","import { defineStore } from 'pinia'\n\nimport { fetchProjects } from '../utils/fetchProjects.mjs'\n\nconst createMetadata = (projects) => {\n  const tags = {},\n    categories = {},\n    years = {}\n\n  projects.forEach((project) => {\n    // push tags\n    project.tags.forEach((entry) => {\n      if (!tags[entry]) {\n        tags[entry] = 0\n      }\n\n      tags[entry] += 1\n    })\n\n    // push categories\n    project.category.forEach((entry) => {\n      if (!categories[entry]) {\n        categories[entry] = 0\n      }\n\n      categories[entry] += 1\n    })\n\n    // push year\n    const year = project.year\n\n    if (!years[year]) {\n      years[year] = 0\n    }\n\n    years[year] += 1\n  })\n\n  return { tags, categories, years }\n}\n\n/**\n * useFilters\n * @description this is our filter store\n */\nexport const useFilters = defineStore('filters', {\n  state: () => {\n    const { tags, categories, years } = createMetadata(fetchProjects())\n    return {\n      // search\n      searchQuery: null,\n\n      // tags\n      tags: tags,\n      activeTags: [],\n\n      // categories\n      categories: categories,\n      activeCategories: [],\n\n      // years\n      years: years,\n      activeYears: [],\n\n      // sort\n      sortKeys: ['year', 'student name', 'title'],\n      activeSortKey: 'year',\n      sortDirection: 'ascending',\n    }\n  },\n  getters: {},\n  actions: {\n    updateQuery(query) {\n      this.searchQuery = query\n    },\n    updateBatch(options) {\n      Object.entries(options).forEach(([key, value]) => {\n        this[key] = value\n      })\n    },\n  },\n})\n","import { createRouter, createWebHashHistory } from 'vue-router'\n\nimport { useFilters } from '@/store/filters'\n\nconst routes = [\n  {\n    path: '/',\n    component: () => import('../views/Index.vue'),\n    children: [\n      // Redirect project base root to homepage\n      {\n        path: '/project/',\n        redirect: () => ({ path: '/' }),\n      },\n      // project route\n      {\n        path: '/project/:slug',\n        component: () => import('../views/Project.vue'),\n      },\n    ],\n  },\n  // Redirect keynote base root to homepage\n  {\n    path: '/keynote/',\n    redirect: () => ({ path: '/' }),\n  },\n  // keynote route\n  {\n    path: '/keynote/:year',\n    component: () => import('../views/Keynote.vue'),\n  },\n  // Error Page\n  {\n    path: '/error',\n    component: () => import('../views/Error404.vue'),\n  },\n  // Redirect routes with no matches to error page\n  {\n    path: '/:noMatch(.*)*',\n    redirect: () => ({ path: '/error' }),\n  },\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n  scrollBehavior() {\n    return { top: 0 }\n  },\n})\n\n/**\n *\n * @param {Array<unknown>} arr\n * @returns {Array<unknown>}\n */\nconst removeDuplicates = (arr) => {\n  return [...new Set(arr)]\n}\n\nconst cleanStrArr = (arr) => {\n  if (!arr) {\n    return []\n  }\n  return removeDuplicates(\n    arr.split('|').filter((tag) => tag.length > 0) || []\n  )\n}\n\nconst cleanNumArr = (arr) => {\n  if (!arr) {\n    return []\n  }\n  return removeDuplicates(\n    arr\n      .split('|')\n      .map((tag) => parseInt(tag))\n      .filter((tag) => tag > 0) || []\n  )\n}\n\nconst updateParams = (query) => {\n  const filterStore = useFilters()\n\n  const activeTags = cleanStrArr(query.tags)\n  const activeCategories = cleanStrArr(query.categories)\n  const activeYears = cleanNumArr(query.years)\n\n  filterStore.updateBatch({\n    searchQuery: query.search || null,\n    activeTags,\n    activeCategories,\n    activeYears,\n  })\n}\n\nrouter.beforeEach((to) => {\n  updateParams(to.query)\n})\n\nexport default router\n","import { createApp, defineAsyncComponent } from 'vue'\nimport { createPinia } from 'pinia'\nimport ElementPlus from 'element-plus'\nimport VueSocialSharing from 'vue-social-sharing'\nimport router from './router'\n\nimport '@/assets/global.css'\n\nconst RootApp = defineAsyncComponent(() => import('./App.vue'))\n\nconst app = createApp(RootApp)\n\nconst pinia = createPinia()\n\n// attach pinia\napp.use(pinia)\n\n// attach router to app\napp.use(router)\n\n// attach element plus to app\napp.use(ElementPlus)\n\n// attach vue social sharing to app\napp.use(VueSocialSharing)\n\n// mount app to <div id=\"app\"></div>\napp.mount('#app')\n"],"file":"assets/index.4ca2a749.js"}